from decimal import MIN_EMIN
from http.client import INSUFFICIENT_STORAGE
from re import I
from readline import replace_history_item
from socket import VMADDR_CID_HOST
from tkinter import N, Variable
from unicodedata import name
from xml.sax.handler import EntityResolver
from pkg_resources import NullProvider, PkgResourcesDeprecationWarning


Clase Persona:
    id: ENTERO 
    edad: ENTERO 
    identidad: IDENTIDAD 

    padre: ENTERO 
    madre: ENTERO 
fin Persona 

#Lista de personas entre 20 y 30 años
Algoritmo edades:
    Entrada:
        familias: TABLA[Persona]
        edad_MIN: ENTERO 
        edad_MAX: ENTERO 

    Resultado: TABLA [1,500]

    Precondicion:
        familias  ≠ NULO 
        edad_MIN ≠ NULO
        edad_MAX ≠ NULO
    
    Constantes:
        MIN: ENTERO <- indice_min (familias)
        MAX: ENTERO <- indice_max (familias)
        MIN_EDADES: ENTERO <- indice_min(resultado)
        MAX_EDAES: ENTERO <- indice_max (resultado)
        INFINITO: ENTERO <- ENTERO_MIN
        HUÉRFANO: ENTERO <- INFINITO
        BORRADO: ENTERO <- HUERFANO + 1
        VACIO:ENTERO <-  HUERFANO +2

    Variable:
        i: ENTERO 
        j: ENTERO 
    
    Inicialización: 
        i: MIN 
        j: MIN_EDADES 
        Resultado [MIN_EDADES] <-  VACIO
        afirmación: 
            i > MIN Y j > MIN_EDADES => 
            Las celdas de sub_tabla(Resultado, MIN_EDADES, j - 1)
            se inicializan con los identificadores de las celdas de sub_tabla (familias, MIN,i- 1)
            los identificadores no son ni BORRADO ni VACIO y la edad está entre edad_MIN y edad_MAX 

    Realización: 
        hasta que: 
            familias[i].id = VACIO 
            o si no i > MAX
            invariante 
           
            variante de control:
                MAX - i+1
        
        repetir: 
            si: 
                familias[i].identificador ≠ BORRADO 
              y entonces: 
                edad_MIN <= familias[i].edad<= edad_MAX
            entonces:
                Resultado[j] <- familias [i].id
                j <- j + 1
            fin si 
            i <- i +1
        fin repetir 

    Postcondición:
        #Resultado está VACIO cuando los límites de edad no están en orden
        edad_MIN> edad_MAX => Resultado[1] = VACIO
        (∀ k ∊ Z) (
            indice_min(Resultado)<=k<=indice_max(Resultado) =>
            Resultado[k]es el identificador de una persona de edad entre edad_MIN y edad_MAX
        )
    fin edades 

#Envejecer a todas las personas registradas
Algoritmo envejecer:
    Entrada: 
        familias: TABLA[Persona]

    Precondicion: 
        familias ≠ NULO 

    Constante: 
        MIN: ENTERO <- indice_min (familias)
        MAX: ENTERO <- indice_max (familias)
        INFINITO: ENTERO <- ENTERO_MIN
        HUÉRFANO: ENTERO <- INFINITO
        BORRADO: ENTERO <- HUERFANO + 1
        VACIO:ENTERO <-  HUERFANO +2

    Variable:
        i: ENTERO 

    Inicializacion:
        i <- MIN 

    Realizacion: 
        hasta que:
            familias[i].id = VACIO 
          o si no: 
            i > MAX
            invariante:
                variante de control: 
                    MAX - i + 1
        repetir: 
            si: 
                familias.[i].id ≠ BORRADO
            entonces: 
                familias[i].edad <- familias[i].edad + 1
            fin si
            i <- i +1 
        fin repetir 

    Postcondicion: 
        Se han incrementado todos los atributos edad a las celdas no VACIO y no BORRADO
    fin envejecer

#Lista de personas huérfanas menores de 15 años 
Algoritmo huerfanos:
    Entrada 
        familias: TABLA[Persona]
        Resulatado: TABLA [ENTERO][1,500]

    Precondicion: 
        familias ≠ NULO 

    Constantes:
        MIN: ENTERO <- indice_min (familias)
        MAX: ENTERO <- indice_max (familias)
        MIN_HUERF: ENTERO <- indice_min(resultado)
        MAX_HUERF: ENTERO <- indice_max (resultado)
        INFINITO: ENTERO <- ENTERO_MIN
        HUÉRFANO: ENTERO <- INFINITO
        BORRADO: ENTERO <- HUERFANO + 1
        VACIO:ENTERO <-  HUERFANO +2

    Variable:
        i: ENTERO 
        j:ENTERO 

    Inicializacion: 
        i <-MIN 
        j <- MIN_HUERF
        resultado [j] <- VACIO 

    Realizacion: 
        hasta que: 
             familias [i].id = VACIO 
          o si no: 
            i > MAX 

            invariante: 

                variante de control: 
                    MAX - i +1

        repetir: 
            si: 
                familias[i].id ≠ BORRADO
              y entonces: 

                (familias[i].padre = HUERFANO
                  o
                familias[i].madre = HUERFANO)
            entonces: 
              Resultado[j] <- familias[i].id
            fin si 
            i <- i +1
        fin repetir 
    Postcondicion:
        Se han registrado en Resultado los identificadores de todos los
        HUERFANOS de las celdas ni VACIO ni BORRADO
    fin huerfanos 

Algoritmo padre:
# El identificador del padre de `identidad'.
    hasta que:
        familias[i].identificador = VACIO
      o si no
        i > MAX
    repetir:
        si:
            familia[i].identificador ≠ BORRADO
      y entonces:
        (   
            familia[i].identidad.nombre = identidad.nombre
        y
            familia[i].identidad.apellido = identidad.apellido
        )
    entonces:
        Resultado[j, 1] ← familia[i].identificador
        Resultado[j, 2] ← familia[i].padre
        j ← j + 1
        fin si
    i ← i + 1
    fin repetir
    variable:
        identidad : IDENTIDAD
        # La identidad para la que se busca el `padre'
        los_padres : MATRIZ[ENTERO][1, MAX_HOMONIMOS][1,2]
        # Los identificadores del `padre' de las personas de

    # identidad 'Jaime MARTIN'. Supone como máximo MAX_HOMONIMOS
    # en la base para `identidad'.
    realización:
        identidad.nombre ← 'Jaime'
        identidad.apellido ← 'MARTIN'
        los_padres ← padre(familias, identidad)

Algoritmo hermandades(identidad, familias):
    # Los identificadores de los hermanos y hermanas de `identidad'.
    Entrada:
        identidad : IDENTIDAD # Persona para la que buscan hermanos
        familias : TABLA[PERSONA] # La tabla a observar
        Resultado : ???
    constante:
        MAX_HOMONIMOS : ENTERO ← ???
        MAX_HERMANOS : ENTERO ← ???

        # Los identificadores de los hermanos y hermanas de una `identidad'
    Resultado : MATRIZ[ENTERO][1, MAX_HOMONIMOS][1, MAX_HERMANOS]

    inicialización:
        Resultado[1,1] ← VACIO # Todavía no hay hermanos registrados
algoritmo hermandades:

    variable:
        identidad : IDENTIDAD
        # La identidad para la que se busca el `padre'
        los_padres : MATRIZ[ENTERO][1, MAX_HOMONIMOS][1,2]
        # Los identificadores del `padre' de estas personas
        un_padre:ENTERO
        # El identificador de un `padre' de la matriz `los_padres'
    realización:
        los_padres ← padre(familias, identidad)
        Hasta que i > MAX_HOMONIMOS o si no los_padres[i,1] = VACIO 
        repetir:
            afirmación:
                i ≤ MAX_HOMONIMOS
                los_padres[i, 1] ≠ VACIO
                identificador ← los_padres[i, 1]
                # Identificador de `identidad' para la que buscan hermanos
                un_padre ← los_padres[i, 2]
                # El padre para el que se buscan los hijos
                Resultado[i] ← unos_hermanos(familias, identificador, un_padre)
                # Cálculo de los hermanos asociados a `identificador'
                i ← i + 1
            fin repetir
    Resultado[i,1] ← VACIO # Marca el final de los datos de la matriz
Algoritmo unos_hermanos:
    # Calcula los hermanos de padre `padre' de los hermanos de
    # `identificador'
    Entrada:
        familias : TABLA[PERSONA]
        identificador : ENTERO # Persona para la que queremos hermanos
        padre : ENTERO # Identificador del padre de los hermanos
        Resultado : TABLA[ENTERO] # Identificadores miembros de los hermanos
    constante:
        MAX : ENTERO ← índice_max(familias)
    variable:
        persona : ENTERO # Un identificador de persona
        i : ENTERO # siguiente hermano/a a registrar
    inicialización:
        Resultado[1] ← identificador
        i ← 1 # Índice del último hermano identificado
        j ← índice_min(familias)
    realización:
        persona ← familias[j].identificador
        # siguiente persona a observar en `familias'
        hasta que persona = VACIO o si no j > MAX 
        repetir:
            invariante:
            variante de control:
                MAX – i + 1
            si:
                persona ≠ BORRADO
              y
                familias[j].padre = padre
                entonces:
                    i ← i + 1
                    Resultado[i] ← persona
            fin si
            j ← j + 1
        fin repetir
        Resultado[i + 1] ← VACIO # Marca el final de los hermanos
    postcondición:
fin unos_hermanos